<launch>
  <!--Spawning Positon & Orientation-->
  <arg name="x" default="0.0"/> 
  <arg name="y" default="0.0"/>
  <arg name="z" default="0.05"/> 
      <!-- Starting -x -1.35 -y 1.35 -z 0.03 -Y -1.57 -->
      <!-- Final Goal -x 0.00 -y 0.00 -z 0.00 -->
  <arg name="roll" default="0.0"/>
  <arg name="pitch" default="0.0"/>
  <arg name="yaw" default="0.0"/>

  <arg name="need_gazebo" value="False"/>


  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description"	 command="$(find xacro)/xacro '$(find ugv_description)/urdf/ugvbot.xacro'" />

  <group if="$(arg need_gazebo)">
    <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
    <include file="$(find ugv_gazebo)/launch/empty_world.launch">
      <arg name="world_name" value="$(find ugv_description)/worlds/worlds/igvc2.world"/> 
      <!-- THE EMPTY WORLD LAUNCH FILE IS CUSTOMIZED TO NOT TO PUBLISH ODOM /tf -->
    </include>
    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot   -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -param robot_description -urdf -model ugvbot"/>
  </group>

  
  <!-- For ros control in simulation -->
  <include file="$(find ugv_control)/launch/ugvbot_sim_control.launch" />
  
  <!-- Filtered odometry EKF Launch file 
  <include file="$(find ugv_bot)/ugvbot_ekf/launch/ugvbot_ekf.launch" /> 
  -->
  <!-- Transformations for rviz launch file   -->
  <!-- <include file="$(find ugv_bot)/transformations/transform.launch" /> -->
  <node name="rviz" pkg="rviz" type="rviz" output="screen"/>

</launch>